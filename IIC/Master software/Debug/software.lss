
software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000755  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000632  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000378  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  000016f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_Init>:
#include "i2c.h"

void TWI_Init(void)
{
    /* Bit Rate:  kbps using zero pre-scaler TWPS=00 and F_CPU=1Mhz */
    TWBR = 0x02;
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
  70:	11 b8       	out	0x01, r1	; 1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
  72:	82 b9       	out	0x02, r24	; 2

    TWCR = (1<<TWEN); /* enable TWI */
  74:	84 e0       	ldi	r24, 0x04	; 4
  76:	86 bf       	out	0x36, r24	; 54
  78:	08 95       	ret

0000007a <TWI_Start>:
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  7a:	84 ea       	ldi	r24, 0xA4	; 164
  7c:	86 bf       	out	0x36, r24	; 54

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
  7e:	06 b6       	in	r0, 0x36	; 54
  80:	07 fe       	sbrs	r0, 7
  82:	fd cf       	rjmp	.-6      	; 0x7e <TWI_Start+0x4>

}
  84:	08 95       	ret

00000086 <TWI_Stop>:
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  86:	84 e9       	ldi	r24, 0x94	; 148
  88:	86 bf       	out	0x36, r24	; 54
  8a:	08 95       	ret

0000008c <TWI_Write>:
}
void TWI_Write(unsigned char data)
{
    /* Put data On TWI data Register */
    TWDR = data;
  8c:	83 b9       	out	0x03, r24	; 3
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
  8e:	84 e8       	ldi	r24, 0x84	; 132
  90:	86 bf       	out	0x36, r24	; 54

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <TWI_Write+0x6>
}
  98:	08 95       	ret

0000009a <main>:
#include "i2c.h"

int main(void)
{
    /* Replace with your application code */
	TWI_Init();
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <TWI_Init>
	INPUT_MODULE(DDRB,0);
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	87 bb       	out	0x17, r24	; 23
	
    while (1) 
    {
		if(INPUT_BIT(PINB,0))
  a4:	b0 9b       	sbis	0x16, 0	; 22
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0xa>
		{
			TWI_Start();
  a8:	0e 94 3d 00 	call	0x7a	; 0x7a <TWI_Start>
			TWI_Write('d');
  ac:	84 e6       	ldi	r24, 0x64	; 100
  ae:	0e 94 46 00 	call	0x8c	; 0x8c <TWI_Write>
			TWI_Stop();
  b2:	0e 94 43 00 	call	0x86	; 0x86 <TWI_Stop>
			while(INPUT_BIT(PINB,0));
  b6:	b0 99       	sbic	0x16, 0	; 22
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x1c>
  ba:	f4 cf       	rjmp	.-24     	; 0xa4 <main+0xa>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
