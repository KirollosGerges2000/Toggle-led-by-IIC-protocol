
SLAVE_SOFTWARE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000744  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063f  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000378  00000000  00000000  00000f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_Init>:
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	80 b9       	out	0x00, r24	; 0
  70:	11 b8       	out	0x01, r1	; 1
  72:	82 b9       	out	0x02, r24	; 2
  74:	84 e0       	ldi	r24, 0x04	; 4
  76:	86 bf       	out	0x36, r24	; 54
  78:	08 95       	ret

0000007a <TWI_Write>:
}
char TWI_Write(unsigned char data)
{
    /* Put data On TWI data Register */
    TWDR = data;
  7a:	83 b9       	out	0x03, r24	; 3
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
  7c:	84 e8       	ldi	r24, 0x84	; 132
  7e:	86 bf       	out	0x36, r24	; 54

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
  80:	06 b6       	in	r0, 0x36	; 54
  82:	07 fe       	sbrs	r0, 7
  84:	fd cf       	rjmp	.-6      	; 0x80 <TWI_Write+0x6>
return TWDR;
  86:	83 b1       	in	r24, 0x03	; 3
}
  88:	08 95       	ret

0000008a <main>:
#include "i2c.h"

int main(void)
{
	/* Replace with your application code */
	TWI_Init();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <TWI_Init>
	OUTPUT_MODULE(DDRD,0);
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	81 60       	ori	r24, 0x01	; 1
  92:	81 bb       	out	0x11, r24	; 17
	OUTPUT_MODULE_OFF(PORTD,0);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	82 bb       	out	0x12, r24	; 18
	while (1)
	{

	if(TWI_Write('d'))
  9a:	84 e6       	ldi	r24, 0x64	; 100
  9c:	0e 94 3d 00 	call	0x7a	; 0x7a <TWI_Write>
  a0:	88 23       	and	r24, r24
  a2:	d9 f3       	breq	.-10     	; 0x9a <main+0x10>
		{
			
		TOGGLE_BIT(PORTD,0);
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	89 27       	eor	r24, r25
  aa:	82 bb       	out	0x12, r24	; 18
		while(TWI_Write('d'));
  ac:	84 e6       	ldi	r24, 0x64	; 100
  ae:	0e 94 3d 00 	call	0x7a	; 0x7a <TWI_Write>
  b2:	81 11       	cpse	r24, r1
  b4:	fb cf       	rjmp	.-10     	; 0xac <main+0x22>
  b6:	f1 cf       	rjmp	.-30     	; 0x9a <main+0x10>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
